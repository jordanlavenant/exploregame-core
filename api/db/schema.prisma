// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgresql://postgres:postgres@localhost:5432/ExploreGame?schema=public"
  // url      = "file:./dev.db"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model Location {
  id          String     @id @default(uuid())
  name        String
  description String
  Question    Question[]
}

model Course {
  id          String   @id @default(uuid())
  name        String
  description String
  Player      Player[]
}

model QuestionType {
  id       String     @id @default(uuid())
  type     String
  Question Question[]
}

model Question {
  id           String       @id @default(uuid())
  question     String
  description  String
  idTQ         String
  idL          String
  QuestionType QuestionType @relation(fields: [idTQ], references: [id])
  Location     Location     @relation(fields: [idL], references: [id])
  Answer       Answer[]
  Hint         Hint[]
}

model Answer {
  id          String   @id @default(uuid())
  answer      String
  description String
  idQ         String
  Question    Question @relation(fields: [idQ], references: [id])
}

model Hint {
  id       String   @id @default(uuid())
  hint     String
  help     String
  idQ      String
  Question Question @relation(fields: [idQ], references: [id])
}

model Script {
  id          String @id @default(uuid())
  script      String
  description String
  word        String
}

model User {
  id        String   @id @default(uuid())
  lastname  String
  firstname String
  mail      String
  password  String
  Player    Player[]
  Admin     Admin[]
}

model Player {
  id     String @id @default(uuid())
  gender String
  idU    String
  idF    String
  User   User   @relation(fields: [idU], references: [id])
  Course Course @relation(fields: [idF], references: [id])
}

model Admin {
  id   String @id @default(uuid())
  role String
  idU  String
  User User   @relation(fields: [idU], references: [id])
}

model Status {
  id     String @id @default(uuid())
  status String
}
